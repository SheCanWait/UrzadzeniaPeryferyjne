using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using PCSC;

namespace ConsoleApplication1
{
    class Program
    {
        private static SCardError errorCard
        private static System.IntPtr protocol;
        private static SCardContext hContext;
        private static SCardReader reader;

        public static void sendCommand(byte[] comand, String name)
        {
            byte[] recivedBytes = new byte[256];
            errorCard = reader.Transmit(protocol, comand, ref recivedBytes);
            checkError(errorCard);
            Console.Write(name + ": ");
            for (int i = 0; i < recivedBytes.Length; i++) {
                Console.Write("{0:X2} ", recivedBytes[i]);
	    }
            Console.WriteLine();
            Console.WriteLine();
        }

        public static void checkError(SCardError error)
        {
            if (error != SCardError.Success)
            {
                throw new PCSCException(error, SCardHelper.StringifyError(err));
            }
        }

        static void Main(string[] args)
        {
            try
            {
                hContext = new SCardContext();
                hContext.Establish(SCardScope.System);

                string[] readerList = hContext.GetReaders();
                if (readerList.Length <= 0)
                {
                    throw new PCSCException(SCardError.NoReadersAvailable, "czytnika - nie ma podlaczonych czytnikow");
                }

                Console.WriteLine("Nazwa czytnika: " + readerList[0]);

                reader = new SCardReader(hContext);

                errorCard = reader.Connect(readerList[0],
                    SCardShareMode.Shared,
                    SCardProtocol.T0 | SCardProtocol.T1);
                checkError(errorCard);

                bool isConnected = reader.IsConnected;
                Console.WriteLine("Is reader connected: " + isConnected);

                Console.WriteLine("Card handle type: " + reader.CardHandle.GetType());

		if(reader.ActiveProtovol == SCardProtocol.T0) {
		protocol = SCardPCI.T0; 
		} else protocol - SCardPCI.T1;

                //SELECT TELECOM
                byte[] commandBytes = new byte[] { 0xA0, 0xA4, 0x00, 0x00, 0x02, 0x7F, 0x10 };
                sendCommand(commandBytes, "SELECT TELECOM");
                //GET RESPONSE
                commandBytes = new byte[] { 0xA0, 0xC0, 0x00, 0x00, 0x16 };
                sendCommand(commandBytes, "GET RESPONSE");
                //SELECT SMS
                commandBytes = new byte[] { 0xA0, 0xA4, 0x00, 0x00, 0x02, 0x6F, 0x3C };
                sendCommand(commandBytes, "SELECT SMS");
                //GET RESPONSE
                commandBytes = new byte[] { 0xA0, 0xC0, 0x00, 0x00, 0x0F };
                sendCommand(commandBytes, "GET RESPONSE");
                //READ - odczytanie tresci SMS'a
                commandBytes = new byte[] { 0xA0, 0xB2, 0x01, 0x04, 0xB0 };
                sendCommand(commandBytes, "READ");

                hContext.Release();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            Console.ReadKey();
        }
    }
}
